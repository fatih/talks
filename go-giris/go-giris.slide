Go programlama dili
14 Mar 2015

Fatih Arslan
Software Engineer, Gopher, Coffee Geek
https://github.com/fatih
fatih@arslan.io
@ftharsln

* Giriş

* Go nedir?

- Ken Thompson, Rob Pike ve Robert Griesiemer tarafindan ilk adımları atıldı (2007)
- 10 Kasım 2009 yılında tanıtıldı, 28 Mart 2012'da Go 1.0 yayımlandı
- Genç ve yeni bir dil
- Açık Kaynak
- Basit ama güçlü
.image gophers.jpg

* Neden Go? (Sorunlar)

Büyük ölçekteki yazılımlari geliştirmenin zorluğu üzerine çıkmıştir. Nedir bu
sorunlar?

- Yavaş inşa sistemleri (build systems)

.image compiling.png

* Neden Go? (Sorunlar)

- Kontrol altına alınamayan bağımlılıklar

.image dependencies.jpg

* Neden Go? (Sorunlar)

- Insanlarin bir dilin özelliklerin belirli alt kümelerini kullanması

.image features.jpg

* Neden Go? (Sorunlar)

- Kod'u anlamak ve okumak zor
- Güncelleme maliyeti
- Makineler hızlı, ama yazılım geliştirme hala yavaş
- Eşzamanlı (concurrent) program geliştırme temelleri bir çok dilde yeterince gelişmemiş
- Google'deki yavaş ve hantal yazılım geliştirme'yi ortadan kaldırmak
- Büyük ölçekteki yazılımları kontrol altında tutmak

* Neden Go? (Çözumler)

- Büyük bir Go programini saniyeler içinde derleyebiliyorsunuz
- Sözdizimi (syntax) anlaşılır
- Temelleri basitlik üzerine kurulan bir düşünce yapısı
- Bağımlılık çözümu kolay ve basit (C tipi include dosyalari olmaksızın)
- Dahili eşzaman  yazılım temelleri (channels, goroutines, select)
- Static typed ama dynamic typed gibi hissediliyor
- Test, belgelendirme, bağımlılık yönetimi, vs.. ekosistemi


* Go'yi kimler kullaniyor?

- Google
- Apple
- Facebook
- Twitter
- Microsoft
- Amazon
- Github
- Ubuntu (Canonical)
- Dropbox
- ve daha fazlası: https://github.com/golang/go/wiki/GoUsers

* Paketler ve Isimlendirme

* Paketler

Her Go uygulaması paketlerden oluşur. 

Paketler ne içerir ? 
- Fonksiyon
- Türler
- Değişkenler
- Sabit türler (constants)

Bir paket bir dosya ve 10 satırdan oluşabileceği gibi, onlarca dosya ve
binlerce satır kod'dan da oluşabilir.

Başka paketleri kullanabilmek icin *import* ile dahil etmek gerekiyor.

* Main paketi

Main paketi özeldir. 

Bir Go uygulamasi main paketi ile ayağa kalkar ve çalışır. Diğer hiç bir paket
kendi başına calısmaz

.play code/main.go


* Isimlendirme

- Baş harfi *büyük* karakter ile başlayan tanımlamaları kullanabiliyorsunuz (public).  
- Bas harfi *küçük* karakter ile başlayan tanımlamaları dışarıdan erışemezsiniz (private).

Örnek: 

	var (
		name    = "example"
		region  = "asia"
		Version = "0.0.1"
	)

	func add(x, y int) int      { return x + y }
	func Multiply(x, y int) int { return x * y }

	type Color struct{}

	func (c *Color) Red(s string) {}
	func (c *Color) prepend()     {}



* Paketlerin kullanımı

Main dışındaki tüm paketler başkaları tarafından kullanılmalı

- package json

Standard library paketlerine doğrudan erişiyorsunuz

- import "fmt"
- import "encoding/json"

Dahil edilen paketin bir ismini değistirebilirsiniz

- import googlelog "google/base/go/log"

Uzaktaki bir sunucudan paket dahil edebilirsiniz

- import "github.com/streadway/amqp"
- import "golang.org/x/net/websocket"

* Paketlerin kullanımı (devam)

	package main

	import (
		"fmt"

		"github.com/fatih/color"
		log "github.com/koding/logging"
	)

	func main() {
		fmt.Println("example app")

		color.Red("Error message")

		l := log.NewLogger("app")
		l.Info("App started")
	}

* Go sözdizimi ve temel dil yapısı

* Türler

.play code/data/data.go /START OMIT/,/END OMIT/

* Değişkenler, çoklu sonuçlar, sıfır değerler, sabitler

Tanımlanmayan değişkenler, öntanımlı olarak o türün sıfır değerini alır.

	var a int
	fmt.Println(a) // a: 0

Fonksiyon girdilerini türe göre gruplayabilirsiniz.

	func foo(x, y, z int) int {}
	func bar(a int, b, c string) int {}

Birden fazla sonuç dönebiliriz 

	func foo() (int, bool) {}
	func bar() (string, string, float64) {}


* Değişkenler, çoklu sonuçlar, sıfır değerler, sabitler (örnek)

.play code/vars/vars.go /START OMIT/,/END OMIT/

* Hata yönetimi (errors)

Çoklu şonuç dönmek güzel, neden sonuçlardan biri *hata* türünde olmuyor?

Exception veya assert yok. C-style hata yönetimi

Hataları her zaman yönetmeniz gerekiyor, kaçıs yok.

C'de:

	file := os.Open("/path/file.txt")
	if file == -1 {
		return -1
	}

Go'da 

	file, err := os.Open("/path/file.txt")
	if err != nil {
		return 0, err
	}

	// file ile ilgili işlemler ...



* Akış kontrolleri

Basit akışlar:

- if, else
- for, break, continue
- switch, case, default, fallthrough
- return
- goto

Gelişmiş akışlar:

- range
- select
- go
- defer

* Defer

defer deyimi, kendisini çevreleyen fonksiyon dönene kadar fonksiyonun
çalışmasını erteler.

.play code/defer/defer.go

* Defer (devam)

.play -edit code/defer2/defer2.go /START OMIT/,/END OMIT/

* Defer (devam)

Çözum:

	func deadlock(a int) {
		mu.Lock()
		if 4 < a {
			mu.Unlock()
			return
		}
		mu.Unlock()
	}

Daha iyi:

	func deadlock(a int) {
		mu.Lock()
		defer mu.Unlock()

		if 4 < a {
			return
		}
	}

* Fonksiyonlar

First class functions

Fonksiyonlar da bir türdür

Anonymous fonksiyonlar


* Fonksiyonlar (devam)

.play code/funcs/funcs.go /START OMIT/,/END OMIT/

* Structs

Birden fazla veri ve türü organize etmeye yarar. 

	type MyInt int	

	type Vertex struct {
		X int
		Y MyInt
		Z bool
	}

Kullanım:

	func main() {
		v := Vertex{1, 2}
		v.X = 4
		fmt.Println(v.X)
	}

* Methods

Go'da Class yapısı bulunmaz. Ama metodlar ile bir *struct* türüne fonksiyonlar
tanımlayabilirsiniz.

.play code/methods/methods.go /START OMIT/,/END OMIT/

Metodlar Go'da çok önemli bir yere sahip.

* Methods (devam)

Metodları tanımladığınız her türe tanımlayabilirsiniz.

	package main

	import "fmt"

	type MyInt int

	func (m MyInt) Add(a int) int {
		return int(m) + a
	}

	func main() {
		var y MyInt = 4
		res := y.Add(5)

		fmt.Println(res) // res: 9
	}

* Interfaces (Arayüz)

Interface tanımlamasi bir veya birden fazla *metod* ile tanımlanır:

	type Adder interface {
		Add(int) int
	}

Interface de, tıpkı int, string, struct gibi bir türdür.

	var a Adder 

Bir tür interface ile tanımlanan metodları tanımlıyorsa o interface'i örtülü
(belirtmeden) gerçekleştirir

	p := Point{3, 4}
	m := MyInt(3)


* Interfaces (Örnek)

Point ve MyInt türleri *Add* metodunu tanımlıyor

	func (p Point) Add(a int) int {
		return p.X + p.Y + a
	}

	func (m MyInt) Add(a int) int {
		return int(m) + a
	}

Interface de bir tür olduğundan bir fonksiyona paslayabiliriz:

.play code/interfaces/interfaces.go /START OMIT/,/END OMIT/

* Interfaces (Standart kitaplıktan örnekler)

Bir türün ayıklanabilir kılmak

	type Sorter interface {
		Len() int
		Less(i, j int) bool
		Swap(i, j int)
	}

fmt.Printf() cıktısını kontrol etmek

	type Stringer interface {
		String() string
	}

Herhangi bir türe HTTP serve desteği vermek

	type Handler interface {
		ServeHTTP(ResponseWriter, *Request)
	}

* Interfaces (Stringer örneği)

Point ve MyInt türlerine *Stringer* desteği verelim

	func (p Point) String() string {
		return fmt.Sprintf("X: %d Y: %d Sum: %d", p.X, p.Y, p.Add(0))
	}

	func (m MyInt) String() string {
		return "*** " + strconv.Itoa(int(m)) + " ***"
	}


.play code/interfaces2/interfaces2.go /START OMIT/,/END OMIT/

* Interfaces (Çevreleme)

Girdi ve çıktısi interface olan fonksiyonlar hem bağımsız hem de ölçeklenebilir
bir yazılım yapmanıza olanak sağlar:

	func LoggingReader(r io.Reader) io.Reader
	func LimitingReader(r io.Reader, n int64) io.Reader
	func ErrorInjector(r io.Reader) io.Reader

* Interfaces (Çevreleme örnek)

Color paketi (https://github.com/fatih/color) sadece Linux/Mac OS X benzeri
işletim sistemlerinde calışıyordu (ANSI desteği olanlarda)

Renk çıktısını kontrol eden değişken bir Interface türu (io.Writer). Mevcut
standard output'u kullaniyor.

	var Output io.Writer = os.Stdout

Windows ANSI desteklemiyor. Çözum:

.image color.png


* Concurrency (Eşzamanlılık)

* Concurrency
.image concurrency.jpg

* Goroutine

Goroutine eş zamanlı olarak başka fonksiyonlar ile çalışabilen fonksiyonlara
denilir.

Go'da her fonksiyon başka bir goroutine tarafından çağırılır ve çalıştırılır.

Main fonksiyon'u ilk *goroutine* olarak başlangıç adımını yapar.

*go* kelimesi ile yeni bir goroutine başlatılır

	go f(x, y, z)

* Goroutine (devam)

Öntanımlı olarak her fonksiyon çağrısı **blocking*

*Nonblocking* yapmak için tek yapmamız gereken önüne *go* keywordunu yerleştirmek.

.play -edit code/goroutine/goroutine.go /START OMIT/,/END OMIT/


* Channels

Don't communicate by sharing memory; share memory by communicating. 

Kanal oluşturma:

	ch := make(chan int)

Veri göndermek:

	ch <- v

Veri almak:

	v := <-ch


* Channels (devam)


Iki goroutine fonksiyonu arasindaki iletişim nasil olur ?

- Ortak bir veri üzerinden (bellek, sharing state)
- Ortak bir iletişim kanalından

Bellek üzerinden veri paylaşım ölçeklenebilir değil ve sorunlara yol açıyor.

Veriyi iletişim yollarından paylaşılmalı

Kanallar (channels) iki eşzamanlı fonksiyonun kendi aralarında etkileşimi senkronize etmeye yaran bir veri mekanizmasıdır.

* Channels (devam)

.play code/channels/channels.go /START OMIT/,/END OMIT/

Öntanımlı olarak veri gönderirken de alırken de karşı taraf hazır olana kadar
bloklanır.

Tamponlanmış kanallar ile bloklamaya ortadan kaldirabiliriz

	ch := make(chan int, 100)

* Range

Verinin üzerinde dolaşmak (iteration) için gerekli

Range keywordu bir çok veri yapısı için kullanıllır

- String (index, rune)
- Array (index, value)
- Slice (index, value)
- Map (key, value)

	for k, v := range ch { }

- Channel (element)

	for e := range ch { }

* Range (devam)

.play -edit code/range/range.go /START OMIT/,/END OMIT/

* Select

*select* deyimi bir "goroutine"nin birden fazla iletişim işleminde beklemesine
izin verir.

Veri alana veya gönderiline kadar bloklar.

Default case eklendiyse doğrudan oraya düşer (advanced pattern)

	select {
	case v1 := <-chan1:
	case chan3 <- v3:
	default:
	}

* Select (devam)

.play -edit code/select/select.go /START OMIT/,/END OMIT/

* Araçlar

* Go tool

.image gotool.png

* Go tool (paket derleme)

Go kodunu inşa etmek ve kurmak icin `go` aracı kullanmak gerekiyor

Bir tane dosya (main paketli) çalıştırmak için. Derleyip calıştiriyor:

	$ go run hello.go

Mevcut klasördeki paketi derleyip kurmak için:

	$ go install

Go aracı diğer tum Go araçları için aynı zamanda bir proxy görevi yapiyor. Yani
onun sayesinde diğer gerekli araçları çağırabilirsiniz (örneğin: go tool
pprof).


* Go tool (import path)

Import path'leri URL şeklinde olabilir:

	import "github.com/fatih/structs"
	import "golang.org/x/net/websocket"

Indirmek için `go` aracını kullanabiliriz:

	$ go get github.com/fatih/structs

"go get" sırayla şunları sizin için yapıyor:

- Git reposunden GOPATH/src/github.com/fatih/structs olarak indiriyor
- Tum paketi derliyor ve kuruyor
- Eger "-u" parametresini verirseniz paketi güncelliyor

* Godoc

`godoc` kodun içinde yer alan belgelendirmeyi çekip çeşitli şekillerde sunuyor.

Yorum (*comment*) olarak ilgili tanımlamanın üst kısmına eklenmesi. 

	// Println formats using the default formats for its operands and
	// writes to standard output.  Spaces are always added between operands
	// and a newline is appended.  It returns the number of bytes written
	// and any write error encountered.
	func Println(a ...interface{}) (n int, err error) {
		return Fprintln(os.Stdout, a...)
	}

.image godoc.png

Kodun içinde yer alan belgelendirme'nin bakımı daha kolaydır.

* Godoc (devam)

godoc.org online olarak bakabilirsiniz

	http://godoc.org/fmt#Println
	http://godoc.org/github.com/fatih/structs

Çevrimdışı bir sunucu çalıştırabilirsiniz

	$ godoc -http:6060

Doğrudan terminal'den kullanabilirsiniz:

	$ godoc fmt
	$ godoc github.com/koding/logging

* Gofmt

Go kodunu güzelleştiriyor.

Tum Go core kodu gofmt'lendirildi. Gofmt'siz kod içeriye girmiyor.

Go kodu nasil yazılmalı? sorusunu ortadan kaldırıyor.

Okunuşu iyileştiriyor. Yazmayi iyileştiriyor. 

Tonlarca saat kazandırır insanlara.

.image gofmt.png _ 900


* Test (yazmak)
* Test (çalıstırmak)
* Test (ölçmek)
* Test (örnekler)

* Editör desteği ve uyumluluğu

- *Vim:* https://github.com/fatih/vim-go
- *Emacs:* https://github.com/dominikh/go-mode.el
- *SublimeText* https://github.com/DisposaBoy/GoSublime
- *IntelliJ:* https://github.com/go-lang-plugin-org/go-lang-idea-plugin
- *Eclipse:* https://github.com/GoClipse/goclipse
- *LiteIDE:* https://github.com/visualfc/liteide

* Nasıl Go öğrenmeye başlayabilirim?

Türkçe turumuz (Ondokuz Mayıs Üniversitesi'nin katkılarıyla)

- http://tur.golang.org.tr/

Go dilinin tüm özellikleri güzel bir şekilde örneklerle anlatan bir site:

- https://gobyexample.com/

Orta ve ileri seviye örnekler, ipucuları

- https://golang.org/doc/effective_go.html


* Go camiası (go-nuts, irc, go-türkiye ...)

- Türkçe mail Listesi: https://groups.google.com/forum/#!forum/golang-tr
- Ingilizce mail listesi: https://groups.google.com/forum/#!forum/golang-nuts
- Freenode'de *#go-nuts*
- Twitter'de *#golang* hash tagi kullanılıyor (#go değil!)

* Go ne degildir ve ne icin kullanilmaz

- Araştırma'ya yönelik bir akademik Programlama dili değil (onlar kendini biliyor :))
- Nesne Yönelimli programlama dili değildir (Object Oriented), ama bir çok dilden bazı özellikleri almıştır.
- Gömullü sistemler için uygun değil (henüz)
- Betik dili değil (Python veya Ruby gibi)

* Go nasıl kurulur?

- *Windows:* MSI kurulum dosyasini (mimariye dikkat edin) https://golang.org/dl/ adresinden indirin. Kurduktan sonra ilgili dosyalari `C:\Go` altina koyacakti. `C:\Go\bin` dizini PATH environment değişkenine ekleyin.
- *OSX:* DMG paketini https://golang.org/dl/ adresinden indirin. Go dağıtımını `/usr/local/go` adresine ekleyecekti. `/usr/local/go/bin` dizinini PATH environment değişkenine ekleyin.
- *Linux:*  Ilgili paket yöneticisi vasıtasıyla kurun
- *Linux*(elle):* Ilgili mimari icin arşivi https://golang.org/dl/ adresinden indirin. `/usr/local/go` altına açın. `/usr/local/go/bin`  dizinini PATH environment değişkenini ekleyin: `echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.profile`.

* Kaynaklar

Slaytı hazırlarken aşağıdaki kaynaklardan faydalandım:

- http://tur.golang.org.tr/
- https://gobyexample.com/
- http://talks.golang.org/2012/splash.article
- http://go-talks.appspot.com/github.com/golang/talks/2012/simple.slide
- https://github.com/golangmedellin/gotalks

* Soru/Cevap

