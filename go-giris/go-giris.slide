Go programlama dili
14 Mar 2015

Fatih Arslan
Software Engineer, Gopher, Coffee Geek
https://github.com/fatih
fatih@arslan.io
@ftharsln

* Giriş

* Go nedir?

- Ken Thompson, Rob Pike ve Robert Griesiemer tarafindan ilk adımları atıldı (2007)
- 10 Kasım 2009 yılında tanıtıldı, 28 Mart 2012'da Go 1.0 yayımlandı
- Genç ve yeni bir dil
- Açık Kaynak
- Basit ama güçlü
- C ailesine yakın dil tanımı
.image gophers.jpg

* Neden Go? (Sorunlar)

Büyük ölçekteki yazılımlari geliştirmenin zorluğu üzerine çıkmıştir. Nedir bu
sorunlar?

- Yavaş inşa sistemleri (build systems)

.image compiling.png

* Neden Go? (Sorunlar)

- Kontrol altına alınamayan bağımlılıklar

.image dependencies.jpg

* Neden Go? (Sorunlar)

- Insanlarin bir dilin özelliklerin belirli alt kümelerini kullanması

.image features.jpg

* Neden Go? (Sorunlar)

- Kod'u anlamak ve okumak zor
- Güncelleme maliyeti
- Makineler hızlı, ama yazılım geliştirme hala yavaş
- Eşzamanlı (concurrent) program geliştırme temelleri bir çok dilde yeterince gelişmemiş
- Google'deki yavaş ve hantal yazılım geliştirme'yi ortadan kaldırmak
- Büyük ölçekteki yazılımları kontrol altında tutmak

* Neden Go? (Çözumler)

- Büyük bir Go programini saniyeler içinde derleyebiliyorsunuz
- Sözdizimi (syntax) anlaşılır
- Temelleri basitlik üzerine kurulan bir düşünce yapısı
- Bağımlılık çözümu kolay ve basit (C tipi include dosyalari olmaksızın)
- Dahili eşzaman  yazılım temelleri (channels, goroutines, select)
- Static typed ama dynamic typed gibi hissediliyor
- Test, belgelendirme, bağımlılık yönetimi, vs.. ekosistemi


* Go'yi kimler kullaniyor?

- Google
- Apple
- Facebook
- Twitter
- Microsoft
- Amazon
- Github
- Ubuntu (Canonical)
- Dropbox
- ve daha fazlası: https://github.com/golang/go/wiki/GoUsers

* Paketler ve Isimlendirme

* Paketler

Her Go uygulaması paketlerden oluşur. 

Paketler ne içerir ? 
- Fonksiyon
- Türler
- Değişkenler
- Sabit türler (constants)

Bir paket bir dosya ve 10 satırdan oluşabileceği gibi, onlarca dosya ve
binlerce satır kod'dan da oluşabilir.

Başka paketleri kullanabilmek icin *import* ile dahil etmek gerekiyor.

* Main paketi

Main paketi özeldir. 

Bir Go uygulamasi main paketi ile ayağa kalkar ve çalışır. Diğer hiç bir paket
kendi başına calısmaz

.play code/main.go


* Isimlendirme

- Baş harfi *büyük* karakter ile başlayan tanımlamaları kullanabiliyorsunuz (public).  
- Bas harfi *küçük* karakter ile başlayan tanımlamaları dışarıdan erışemezsiniz (private).

Örnek: 

	var (
		name    = "example"
		region  = "asia"
		Version = "0.0.1"
	)

	func add(x, y int) int      { return x + y }
	func Multiply(x, y int) int { return x * y }

	type Color struct{}

	func (c *Color) Red(s string) {}
	func (c *Color) prepend()     {}



* Paketlerin kullanımı

Main dışındaki tüm paketler başkaları tarafından kullanılmalı

- package json

Standard library paketlerine doğrudan erişiyorsunuz

- import "fmt"
- import "encoding/json"

Dahil edilen paketin bir ismini değistirebilirsiniz

- import googlelog "google/base/go/log"

Uzaktaki bir sunucudan paket dahil edebilirsiniz

- import "github.com/streadway/amqp"
- import "golang.org/x/net/websocket"

* Paketlerin kullanımı 2 

	package main

	import (
		"fmt"

		"github.com/fatih/color"
		log "github.com/koding/logging"
	)

	func main() {
		fmt.Println("example app")

		color.Red("Error message")

		l := log.NewLogger("app")
		l.Info("App started")
	}

* Go sözdizimi ve temel dil yapısı

* Türler

.play code/data/data.go /START OMIT/,/END OMIT/

* Değişkenler, çoklu sonuçlar, sıfır değerler, sabitler

.play code/vars/vars.go /START OMIT/,/END OMIT/

* Zero Values

Her degişken öntanımli olarak o türün sıfır değerini alır.

Basit ama önemli bir özellik.

.play code/zero/zero.go /START OMIT/,/END OMIT/


* Akış kontrolleri

Basit akışlar:

- if, else
- for, break, continue
- switch, case, default, falltrhough
- return
- goto

Gelişmiş akışlar:

- range
- select
- go
- defer

* Defer

defer deyimi, kendisini çevreleyen fonksiyon dönene kadar fonksiyonun
çalışmasını erteler.

.play code/defer/defer.go

* Defer 2 

.play -edit code/defer2/defer2.go /START OMIT/,/END OMIT/

* Defer 2 (çözüm)

	func deadlock(a int) {
		mu.Lock()
		if 4 < a {
			mu.Unlock()
			return
		}
		mu.Unlock()
	}

Daha iyi:

	func deadlock(a int) {
		mu.Lock()
		defer mu.Unlock()

		if 4 < a {
			return
		}
	}

* Structs

Birden fazla veri ve türü organize etmeye yarar. 

	type MyInt int	

	type Vertex struct {
		X int
		Y MyInt
		Z bool
	}

Kullanım:

	func main() {
		v := Vertex{1, 2}
		v.X = 4
		fmt.Println(v.X)
	}

* Methods

Go'da Class yapısı bulunmaz. Ama metodlar ile bir *struct* türüne fonksiyonlar
tanımlayabilirsiniz.

.play code/methods/methods.go /START OMIT/,/END OMIT/

Metodlar Go'da çok önemli bir yere sahip.

* Methods 2

Metodları tanımladığınız her türe tanımlayabilirsiniz.

	package main

	import "fmt"

	type MyInt int

	func (m MyInt) Add(a int) int {
		return int(m) + a
	}

	func main() {
		var y MyInt = 4
		res := y.Add(5)

		fmt.Println(res) // res: 9
	}

* Interfaces
* Hata yönetimi (errors)
* Goroutine
* Channels
* Range
* Select

* Araçlar
* Go tool
* Godoc
* Gofmt
* Test (yazmak)
* Test (çalıstırmak)
* Test (ölçmek)


* Go araçlari (go get, gofmt, go test, golint, vs...)
* Koding'de Go nasil kullanılıyor? Deploy nasıl yapılır?
* Editör desteği ve uyumluluğu
* Go camiasi (go-nuts, irc, go-türkiye ...)
* Go ne degildir ve ne icin kullanilmaz
* Nasil Go ogrenemeye baslayabilirim?
* Go nasil kurulur?
* Kaynaklar, kitaplar, öğrenilmesi gerekenler ...
* Soru/Cevap

