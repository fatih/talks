Go programlama dili
25 Nisan 2015

Fatih Arslan
Software Engineer at Koding, Gopher, Coffee Geek
https://github.com/fatih
fatih@arslan.io
@ftharsln

* Giriş

* Go nedir?

- Açık Kaynak, genç ve yeni bir programlama dili
- Ken Thompson, Rob Pike ve Robert Griesiemer tarafından ilk adımları atıldı (2007)
- 10 Kasım 2009 yılında tanıtıldı, 28 Mart 2012'da Go 1.0 yayınlandı
- Basit ama güçlü
.image gophers.jpg

* Neden Go? (Sorunlar)

Büyük ölçekteki yazılımları (Google'deki) geliştirmenin zorluğu üzerine çıkmıştır. 

Nedir bu sorunlar?

* Neden Go? (Sorunlar)

- Yavaş inşa sistemleri (build systems)

.image compiling.png

Koding'deki 200K Go kodu 11 saniye'de derleniyor (Macbook Pro)

* Neden Go?

- Insanların bir dilin özelliklerin belirli alt kümelerini kullanması

.image rental.png

Go'da bir işi yapmanın genellikle sadece bir yolu vardır.

* Neden Go?

- Mevcut kodunuzu onlarca sunucuya sorunsuzca yerleştirmek

.image deployment.jpg

Go tek bir dosya'ya derleniyor. Bir tane binary'yi kopyalamak yeterli.

* Neden Go?

Karışık şöz dizimi kuralları

.image syntax.jpg

Go'da sadece 25 tane keyword var (C99 de 37 tane var; C++11 de 84 var ve sayı gittikçe artıyor)

* Neden Go? (devam)

- Basit
- Geriye dönük uyumluluk
- Eşzamanlı (concurrency) 
- Garbage collection
- Static Typed
- Ve daha nicesi ...

* Go ne değildir ve ne için kullanılmaz

- Araştırma'ya yönelik bir akademik Programlama dili değil (onlar kendini biliyor :))
- Gömülü sistemler için uygun değil (henüz)
- Betik dili değil (Python veya Ruby gibi)

* Go'yu kimler kullanıyor?

- Koding
- Google
- Apple
- Facebook
- Twitter
- Dropbox
- Amazon
- Github
- Ubuntu (Canonical)
- ve daha fazlası: https://github.com/golang/go/wiki/GoUsers

* Go'ya giriş


* İlk Go uygulamamız

Bir Go uygulaması main paketi ile ayağa kalkar ve çalışır. Diğer hiç bir paket
kendi başına çalışmaz.

.play code/main.go

* Paketler


Her Go uygulaması paketlerden oluşur. 

Paketler ne içerir ? 
- Fonksiyon
- Türler (types)
- Değişkenler
- Sabit türler (constants)

Bir paket bir dosya ve 10 satırdan oluşabileceği gibi, onlarca dosya ve
binlerce satır kod'dan da oluşabilir.

Başka paketleri kullanabilmek icin *import* ile dahil etmek gerekiyor.

* Paketlerin kullanımı

	package main

	import (
		"fmt"

		"github.com/fatih/color"
		log "github.com/koding/logging"
	)

	func main() {
		fmt.Println("example app")

		color.Red("Error message")

		l := log.NewLogger("app")
		l.Info("App started")
	}


* İsimlendirme

- Baş harfi *büyük* karakter ile başlayan tanımlamaları kullanabiliyorsunuz (public).  
- Baş harfi *küçük* karakter ile başlayan tanımlamaları dışarıdan erişemezsiniz (private).

Örnek: 

	var name string = "example"
	var Version string = "0.0.1"

	func add(x, y int) int { 
		return x + y 
	}

	func Multiply(x, y int) int { 
		return x * y 
	}

* Değişkenler

- Statically typed:
	var x int
	var s, t string
- Örtülu (implicit) ya da belirgin (explicit) ilklendirme (initialization):
	var x int
	var s, t string = "foo", "bar"  // multiple assignment

	var x = 42                      // int
	var s, b = "foo", true          // string, bool
- Kısaltılmış değişken bildirimleri (sadece fonksiyonların içinde geçerli):
	x := 42
	s, b := "foo", true
- Adresini almak mümkün (tipki C'deki gibi)
	return &x
# compiler will do the right thing

* Değişkenler, çoklu sonuçlar, sıfır değerler, sabitler (örnek)

- Tanımlanmayan değişkenler, öntanımlı olarak o türün sıfır değerini alır.
- Birden fazla sonuç dönebiliriz 

.play code/vars/vars.go /START OMIT/,/END OMIT/

* Hata yönetimi (errors)

Çoklu sonuç dönmek güzel, neden sonuçlardan biri *hata* türünde olmuyor?

Exception veya assert yok. 

Hataları her zaman yönetmeniz gerekiyor, kaçış yok.

C'de:

	file := os.Open("/path/file.txt")
	if file == -1 {
		return -1
	}

Go'da 

	file, err := os.Open("/path/file.txt")
	if err != nil {
		return 0, err
	}

	// file ile ilgili işlemler ...

* Araçlar

* Go tool

.image gotool.png

* Go tool (paket derleme)

Go kodunu inşa etmek ve kurmak için `go` aracı kullanmak gerekiyor

Bir tane dosya (main paketli) çalıştırmak için. Derleyip calıştiriyor:

	$ go run hello.go

Mevcut klasördeki paketi derleyip kurmak için:

	$ go install
	$ go install github.com/jgrahamc/httpdiff

Go aracı diğer tüm Go araçları için aynı zamanda bir proxy görevi yapıyor. Yani
onun sayesinde diğer gerekli araçları çağırabilirsiniz (örneğin: go tool
pprof).


* Go tool (import path)

Import path'leri URL şeklinde olabilir:

	import "github.com/fatih/structs"
	import "golang.org/x/net/websocket"

İndirmek için `go` aracını kullanabiliriz:

	$ go get github.com/fatih/structs

"go get" sırayla şunları sizin için yapıyor:

- Git reposunden GOPATH/src/github.com/fatih/structs olarak indiriyor
- Tüm paketi derliyor ve kuruyor
- Eger "-u" parametresini verirseniz paketi güncelliyor

* Godoc

`godoc` kodun içinde yer alan belgelendirmeyi çekip çeşitli şekillerde sunuyor.

Yorum (*comment*) olarak ilgili tanımlamanın üst kısmına eklenmesi. 

	// Println formats using the default formats for its operands and
	// writes to standard output.  Spaces are always added between operands
	// and a newline is appended.  It returns the number of bytes written
	// and any write error encountered.
	func Println(a ...interface{}) (n int, err error) {
		return Fprintln(os.Stdout, a...)
	}

.image godoc.png

Kodun içinde yer alan belgelendirme'nin bakımı daha kolaydır.

* Godoc (devam)

godoc.org online olarak bakabilirsiniz

	http://godoc.org/fmt#Println
	http://godoc.org/github.com/fatih/structs

Çevrimdışı bir sunucu çalıştırabilirsiniz

	$ godoc -http:6060

Doğrudan terminal'den kullanabilirsiniz:

	$ godoc fmt
	$ godoc github.com/koding/logging

* Gofmt

Go kodunu güzelleştiriyor.

Tüm Go core kodu gofmt'lendirildi. Gofmt'siz kod içeriye girmiyor.

Go kodu nasıl yazılmalı? sorusunu ortadan kaldırıyor.

Okunuşu iyileştiriyor. Yazmayı iyileştiriyor. 

Stil tartışmalara son veriyor

.image gofmt.png _ 900

* Test (yazmak)

`go` aracı ve `testing` paketi hafif bir test framework'u sunuyor

.code code/test/string_test.go /func TestIndex/,/^}/

* Test (çalıştırmak)

Go aracı ile testleri çalıştırıyorsunuz

	$ go test
	PASS

	$ go test -v
	=== RUN TestIndex
	--- PASS: TestIndex (0.00 seconds)
	PASS

	$ go test -run "AnotherIndex"
	=== RUN TestAnotherIndex
	--- PASS: TestAnotherIndex (0.00 seconds)
	PASS

Mevcut tüm projeler için çalıştırmak için:

	$ go test github.com/koding/...

* Editör desteği ve uyumluluğu

- *Vim:* https://github.com/fatih/vim-go
- *Emacs:* https://github.com/dominikh/go-mode.el
- *SublimeText* https://github.com/DisposaBoy/GoSublime
- *IntelliJ:* https://github.com/go-lang-plugin-org/go-lang-idea-plugin
- *Eclipse:* https://github.com/GoClipse/goclipse
- *LiteIDE:* https://github.com/visualfc/liteide


* Go sözdizimi ve temel dil yapısı

* Türler

- Basit türler:
	uint8 (byte), uint16, uint32, uint32, uint64,
	int8, int16, int32, int32 (rune), int64,
	float32, float64,
	complex64, complex128,
	uint, int, uintptr,
	bool, string,
	error  // not so usual

- Birleşik (composite) türler:
	array, struct, pointer, function,
	slice, map, channel

- Soyut tür:
	interface

* Türler (devamı)

.play code/data/data.go /START OMIT/,/END OMIT/

* Akış kontrolleri

Basit akışlar:

- if, else
- for, break, continue
- switch, case, default, fallthrough
- return
- goto

Gelişmiş akışlar:

- range
- select
- go
- defer

* Defer

defer deyimi, kendisini çevreleyen fonksiyon dönene kadar fonksiyonun
çalışmasını erteler.

.play code/defer/defer.go

* Fonksiyonlar

Birinci sınıf functions

Fonksiyonlar da bir türdür

Anonim fonksiyonlar

* Fonksiyonlar (devam)

- Düz fonksiyonlar
	func Sin(x float64) float64
	func AddScale(x, y int, f float64) int

- Coklu sonuçlar 
	func Write(data []byte) (int, error)

- Belirsiz sayıda parametre (variadic arguments)
	func Printf(format string, args ...interface{})
	
	// örnek kullanım
	fmt.Printf("Hello %s: %d", "fatih", 2015)

- Birinci sınıf fonksıyonlar
	var delta int
	return func(x int) int { return x + delta }

* Fonksiyonlar (devam)

.play code/funcs/funcs.go /START OMIT/,/END OMIT/


* Structs

Birden fazla veri ve türü organize etmeye yarar. 

	type Vertex struct {
		X int
		Y string
		Z bool
	}

Veri'ye erişmek için `.` operatörünü kullanıyoruz:

	v := Vertex{
		X: 5,
		Y: "Zeynep",
		Z: true,
	}

	fmt.Println(v.X)

* Methods

Metodlar da birer fonksiyondur. Sadece fonksiyonlar farkli olarak _alıcıları_ vardır

Go'da Class yapısı bulunmaz. Ama metodlar ile bir ana türü fonksiyonlar
tanımlayabilirsiniz. Örnek bir *struct* türüne tanımlanmış metod:

.play code/methods/methods.go /START OMIT/,/END OMIT/

Metodlar Go'da çok önemli bir yere sahip.

* Methods (devam)

Metodları tanımladığınız her türe tanımlayabilirsiniz.

	package main

	import "fmt"

	type MyInt int

	func (m MyInt) Add(a int) int {
		return int(m) + a
	}

	func main() {
		var y MyInt = 4
		res := y.Add(5)

		fmt.Println(res) // res: 9
	}

* Interfaces (Arayüz)

Arayüzler bir türün davranışını belirlememizi sağlar.

Interface tanımlaması sıfır, bir veya birden fazla *metod* ile tanımlanır:

	interface{}  // boş interface

	interface {
		Add(num int) int
	}

	interface {
		Len() int
		Swap(i, j int)
		Less(i, j int) bool
	}


Bir tür, interface ile tanımlanan metodları tanımlıyorsa (implement) o
interface'i örtülü (implicit) gerçekleştirir


* Interfaces (Örnek)

Point ve MyInt türleri *Add* metodunu tanımlıyor

	func (p Point) Add(a int) int { return p.X + p.Y + a }

	func (m MyInt) Add(a int) int { return int(m) + a }

Interface de bir tür olduğundan bir fonksiyona paslayabiliriz:

.play code/interfaces/interfaces.go /START OMIT/,/END OMIT/

* Interfaces (Standart kitaplıktan örnekler)

Bir türü siralayabilmek için:

	type Sorter interface {
		Len() int
		Less(i, j int) bool
		Swap(i, j int)
	}

fmt.Printf() cıktısını değiştirmek için (Python'daki _str_, _repr_ gibi) 

	type Stringer interface {
		String() string
	}

Herhangi bir türe HTTP serve desteği vermek

	type Handler interface {
		ServeHTTP(ResponseWriter, *Request)
	}

* Interfaces (Stringer örneği)

.play code/interfaces3/interfaces3.go /START OMIT/,/END OMIT/

Point ve MyInt türlerine *Stringer* desteği verelim

	func (p Point) String() string {
		return fmt.Sprintf("X: %d Y: %d Sum: %d", p.X, p.Y, p.Add(0))
	}

	func (m MyInt) String() string {
		return "*** " + strconv.Itoa(int(m)) + " ***"
	}


.play code/interfaces2/interfaces2.go /START OMIT/,/END OMIT/

* Interfaces (Çevreleme örnek)

Standart cıktıya bir sey yazdırmak.

	fmt.Println(msg string)

	// kullanım
	fmt.Println("Gopher")

Belirgin (explicit) olarak da ifade edebiliriz

	fmt.Fprintln(w io.Writer, msg string)

	// kullanım
	fmt.Fprintln(os.Stdout, "Gopher")

	// bunlar da geçerli
	fmt.Fprintln(textFile, "Gopher")
	fmt.Fprintln(connection, "Gopher")
	fmt.Fprintln(os.Stderr, "Gopher")

* Interfaces (Çevreleme örnek)

Color paketi (https://github.com/fatih/color) sadece Linux/Mac OS X benzeri
işletim sistemlerinde çalışıyordu (ANSI desteği olanlarda)

Renk çıktısını kontrol eden değişken (*Output* adında) bir Interface türü
(io.Writer). Mevcut standard çıktısı kullanıyor.

Windows ANSI desteklemiyor. Çözüm:

.image color.png


* Concurrency (Eşzamanlılık)

* Concurrency
.image concurrency.jpg


* Eşzamanlılık nedir?

Birbirinden bağımsız çalışmaların bir araya gelmesi, birleşmesi.

Parallelik *değildir*

Sadece bir işlemciniz varsa uygulamanız hala eşzamanlı çalışabilir, ama parallel çalışamaz.

Daha fazla bilgi için: http://golang.org/s/concurrency-is-not-parallelism


* Sıkıcı bir uygulama

Go'nun eşzamanlı özelliklerini sıkıcı bir uygulama üzerinden anlatalım.

.code code/concurrency/boring.go /START/,/STOP.*/

* Biraz daha az sıkıcı

Zamanlamayı biraz tahmin edilemeyecek şekilde yapalim (hala bir saniyenin altında)

.code code/concurrency/lessboring.go /START/,/STOP/

* Çalıştıralım

Bu sıkıcı uygulama sonsuza kadar çalışıyor.

.play code/concurrency/lessboring.go /^func.main/,$

* Arka plana atalım

go kelimesi normal fonksiyon gibi çalışır, sadece kendisini çağıranı bekletmez.

Bir tane goroutine çalıştırıyor.

Betik komutunun sonuna & konulmuş gibi düşünebilirsiniz.

.play code/concurrency/goboring.go 1,/^}/

* Arka plana atalım (devamı)

Main fonksiyonu bittiğinde uygulama kapanıyor, onunla birlikte sıkıcı uygulamamız da bitiyor.

Biraz daha durabiliriz, böylelikle main fonksiyonu ve çalıştırdığımız goroutine çalıştığını görebiliriz.

.play code/concurrency/waitgoboring.go /func.main/,/^}/

* Goroutine

Goroutine nedir? Goroutine, go kelimesi ile başlatılan ve bağımsız çalışan bir fonksiyondur.

Çok ucuz, binlerce, hatta yüz binlerce çağırabiliriz.

Thread *değildir*. (Işletim sistemi seviyesinde değil)

Bir tane thread altında binlerce goroutine çalışabilir.

Çok ucuz bir thread gibi düşünebilirsiniz.

* İletişim

Önceki sıkıcı uygulamamız sadece çıktı üretmişti.

Halbuki iletişim için girdiye ihtiyac vardır.

Goroutine'ler arasında iletişim nasıl olur?

- Don't communicate by sharing memory; share memory by communicating.

* Channels

Kanallar iki goroutine'nin arasinda bir bağlantı sağlayarak, iletişim
yapmalarını sağlarlar.


Kanal oluşturma:

	ch := make(chan int)

Veri göndermek:

	ch <- 5

Veri almak (ok işareti verinin yönünü gösteriyor):

	v = <-ch


* Channels (devam)

.play code/channels/channels.go /START OMIT/,/END OMIT/

Öntanımlı olarak veri gönderirken de alırken de karşı taraf hazır olana kadar
bloklanır.

* Devamı var...

Daha gelişmiş özelliklerimiz var. Bu konuşmanın dışında.

- Buffered Channels

- Range

- Select


* Nasıl Go öğrenmeye başlayabilirim?

Türkçe turumuz (Ondokuz Mayıs Üniversitesi'nin katkılarıyla)

- http://tur.golang.org.tr/

Go dilinin tüm özellikleri güzel bir şekilde örneklerle anlatan bir site:

- https://gobyexample.com/

Orta ve ileri seviye örnekler, ipucuları

- https://golang.org/doc/effective_go.html


* Go camiası (go-nuts, irc, go-türkiye ...)

- Türkçe mail listesi: https://groups.google.com/forum/#!forum/golang-tr
- Ingilizce mail listesi: https://groups.google.com/forum/#!forum/golang-nuts
- Freenode'de *#go-nuts*
- Twitter'de *#golang* hash tagi kullanılıyor (#go değil!)


* Go nasıl kurulur?

- *Windows:* MSI kurulum dosyasini (mimariye dikkat edin) https://golang.org/dl/ adresinden indirin. Kurduktan sonra ilgili dosyalari `C:\Go` altina koyacakti. `C:\Go\bin` dizini PATH environment değişkenine ekleyin.
- *OSX:* DMG paketini https://golang.org/dl/ adresinden indirin. Go dağıtımını `/usr/local/go` adresine ekleyecekti. `/usr/local/go/bin` dizinini PATH environment değişkenine ekleyin.
- *Linux:*  Ilgili paket yöneticisi vasıtasıyla kurun
- *Linux*(elle):* Ilgili mimari icin arşivi https://golang.org/dl/ adresinden indirin. `/usr/local/go` altına açın. `/usr/local/go/bin`  dizinini PATH environment değişkenini ekleyin: `echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.profile`.

* Kaynaklar

Slaytı hazırlarken aşağıdaki kaynaklardan faydalandım:

- http://tur.golang.org.tr/
- https://gobyexample.com/
- http://talks.golang.org/2012/splash.article
- http://go-talks.appspot.com/github.com/golang/talks/2012/simple.slide
- https://github.com/golangmedellin/gotalks
- https://talks.golang.org/2012/concurrency.slide

* Soru/Cevap

